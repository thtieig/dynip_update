#!/bin/bash 
####################################################################
####################################################################
# Scripts that updates dynamic DNS servers using HTTPS via CURL.
# Curl is a required package. Please make sure it's installed!
# Currently supports Internet.bs and NO-IP.com providers.
# Custom parameters are set in /etc/dynip_update.conf - PLESE UPDATE
# THAT FILE - DO NOT CHANGE THIS SCRIPT.
####################################################################
####################################################################

#DATENOW="`date`"
# Serial 2014110903

# Include custom parameters for this script
source /etc/dynip_update.conf

# IP files
ME=`basename $0`
P_IP=/var/run/${ME}_p_ip.txt
C_IP=/dev/shm/${ME}_c_ip.txt


####################################################################

get_ip () {
# reset content of C_IP
echo "" > $C_IP
# curl randomly one of the services and check that the output is actually an IP
# store this into CURR_IP variable and increment TRIES counter variable
declare -a SERVICES=("ipecho.net/plain" "ident.me" "tnx.nl/ip" "ip.appspot.com" "curlmyip.com")
SRV=${SERVICES[$((  RANDOM % ${#SERVICES[@]}  ))]}
$CURL -s --retry 3 --retry-delay 5 -m 15 $SRV > $C_IP
(( TRIES++ ))
CURR_IP="`cat $C_IP | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`"
}

check_ip () {
# Check if CURR_IP is empty and retry for a number of times stored into MAXTRIES
if [ -z "$CURR_IP" ]
  then retry $MAXTRIES
fi
}

retry () {
# If you've reached already MAXTRIES, notify. 
# Otherwise retry to get the IP, log it, increase the counter and check_ip again
if [ $TRIES -eq $1 ]
  then 
	notify "Unable to get current IP for `hostname` - $DYNHOSTNAME after $1 attempts reached -> Aborting" ; exit 1
  else
	get_ip
	# Just log the retries (no notifications)
	logger "${BASH_SOURCE[0]} PID $$ is retrying to get the IP using $SRV: attempt #$TRIES"
	check_ip
fi
}

is_update_required () {
# In case of IP mismatch between current and previous, update and notify
if [ "$CURR_IP" != "`cat $P_IP`" ] 
   then 
	store_ip
	update_ip
	notify "New IP $CURR_IP set for $DYNHOSTNAME - at `date "+%H:%M %d/%m/%Y"` from `hostname`"
fi
}

notify () {
# If email notification is set to 1 (enabled) notify via mail and log
# Otherwiser just print on screen and log
if [ $EMAILNOTIFICATION -eq 1 ]
   then
	echo -e "Subject:$1\n" | $SENDMAIL $EMAIL
	logger "${BASH_SOURCE[0]} PID $$ - $1"
   else
	echo -e "$1\n"
	logger "${BASH_SOURCE[0]} PID $$ - $1"
fi
}

update_ip () {
# Curl APIs to update with the new IP. Expecting output 'good'. If not notify.
RESULT=$($CURL -s -k -u "$USERNAME:$PASS" "$DYNIPPROV?hostname=$DYNHOSTNAME&myip=$CURR_IP")
if [[ `echo "$RESULT" | grep -c "good"` -ne 1 ]]
   then 
	notify "[WARNING] DNS update result from `hostname` for $DYNHOSTNAME is $RESULT. Investigation needed."
	exit 1
fi
}

store_ip () {
echo "$CURR_IP" > $P_IP
}


####################################################################
# Initialise TRIES variable
TRIES=0

# Set max number of possible re-tries
MAXTRIES=3

get_ip
check_ip
is_update_required

