#!/bin/bash 
####################################################################
####################################################################
# Scripts that updates dynamic DNS servers using HTTPS via CURL.
# Curl is a required package. Please make sure it's installed!
# Currently supports Internet.bs and NO-IP.com providers.
# Custom parameters are set in /etc/dynip_update.conf
# PLEASE UPDATE THAT FILE - DO NOT CHANGE THIS SCRIPT.
####################################################################
####################################################################

# Version 3.2.1
# Serial 2020041817511843

# Include custom parameters for this script
CONFIG_FILE='/etc/dynip_update.conf'
source ${CONFIG_FILE}

ME=`basename $0`
P_IP="${FILESPATH}/${ME}_p_ip.txt"
SERVERNAME_CHECKFILE="${FILESPATH}/${ME}_servername.chk"
    
####################################################################

if [ "$1" == '-f' ]; then
  FORCE_UPDATE='true'
else
  FORCE_UPDATE='false'
fi 

DYNHOSTNAME="${SERVERNAME}.${DOMAINNAME}"

case ${DYNIPPROV} in
	noip)
		DYNIPURL="https://dynupdate.no-ip.com/nic/update"
		UPDATETYPE=1
		;;
	internetbs)
		DYNIPURL="https://dyndns.topdns.com/update"
		UPDATETYPE=1
		;;
	cloudflare)
		UPDATETYPE=2
		;;
	*)
		echo "Dynamic DNS Provider unrecognised. Please check dynip_update.conf file."
		exit 1
		;;
esac


get_ip () {
  # curl randomly one of the services and check that the output is actually an IP
  # store this into CURR_IP variable and increment TRIES counter variable
  declare -a SERVICES=($GET_IP_SERVERS)
  SRV=${SERVICES[$((  RANDOM % ${#SERVICES[@]}  ))]}
  CURR_IP="`${CURL} -s --retry 3 --retry-delay 5 -m 15 ${SRV} | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`"
  (( TRIES++ ))
}

check_ip () {
  # Check if CURR_IP is empty and retry for a number of times stored into MAXTRIES
  if [ -z "${CURR_IP}" ]
    then retry ${MAXTRIES}
  fi
}

retry () {
  # If you've reached already MAXTRIES, notify. 
  # Otherwise retry to get the IP, log it, increase the counter and check_ip again
  if [ ${TRIES} -eq $1 ]
    then 
    notify "Unable to get current IP for `hostname` - ${DYNHOSTNAME} after $1 attempts reached -> Aborting" ; exit 1
    else
    get_ip
    # Just log the retries (no notifications)
    logger "${BASH_SOURCE[0]} PID $$ is retrying to get the IP using ${SRV}: attempt #${TRIES}"
    check_ip
  fi
}

check_if_servername_has_changed () {
  touch ${SERVERNAME_CHECKFILE}
  # Make sure the SERVERNAME hasn't changed. If so, 
  # 1) reset the AUTO_RECORD_IDENTIFIER in the CONF_FILE
  # 2) reset the AUTO_RECORD_IDENTIFIER runtime var
  # 3) update the SERVERNAME_CHECKFILE with the SERVERNAME
  # 4) set FORCE_UPDATE to 'true'
  PREVIOUS_SERVER_NAME="$(cat ${SERVERNAME_CHECKFILE})"
  if [ "${PREVIOUS_SERVER_NAME}" != "${SERVERNAME}" ]; then
    sed -i "s/^AUTO_RECORD_IDENTIFIER=.*$/AUTO_RECORD_IDENTIFIER=/g" ${CONFIG_FILE}
    AUTO_RECORD_IDENTIFIER=''
    echo "${SERVERNAME}" > ${SERVERNAME_CHECKFILE}
    FORCE_UPDATE='true'
  fi

}

is_update_required () {
# If FORCE_UPDATE is 'true' or in case of IP mismatch between current and previous IP
# update and notify
PREV_IP=`cat $P_IP`
if ${FORCE_UPDATE} || [ "${CURR_IP}" != "${PREV_IP}" ]; then
	store_ip
	update_ip ${UPDATETYPE}
	notify "New IP ${CURR_IP} set for ${DYNHOSTNAME} - at `date "+%H:%M %d/%m/%Y"` from `hostname`"
fi
}

notify () {
# If email notification is set to 1 (enabled) notify via mail and log
# Otherwiser just log (print on screen for debugging)
if [ ${EMAILNOTIFICATION} -eq 1 ]
   then
	echo -e "Subject:$1\n" | ${SENDMAIL} ${EMAIL}
	logger "${BASH_SOURCE[0]} PID $$ - $1"
   else
	#echo -e "$1\n"  # Enable for debugging
	logger "${BASH_SOURCE[0]} PID $$ - $1"
fi
}

update_ip () {
  case ${UPDATETYPE} in
	1)
		update_ip_type1
		;;
	2)
		update_ip_type2
		;;
	*)
		echo "Unknown update type. Aborting."
		exit 1
		;;
  esac
}

update_ip_type1 () {
# Curl APIs to update with the new IP. Expecting output 'good'. If not notify.
RESULT=$(${CURL} -s -k -u "${USERNAME}:${PASS}" "${DYNIPURL}?hostname=${DYNHOSTNAME}&myip=${CURR_IP}")
if [[ `echo "${RESULT}" | grep -c "good"` -ne 1 ]]
   then 
	notify "[WARNING] DNS update result from `hostname` for ${DYNHOSTNAME} is ${RESULT}. Investigation needed."
	exit 1
fi
}


update_ip_type2 () {

  # If the DNS record Identifier is not set, get it via API and update the CONFIG_FILE
  if [ -z ${AUTO_RECORD_IDENTIFIER} ]; then
    AUTO_RECORD_IDENTIFIER="$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONEID}/dns_records?name=${DYNHOSTNAME}" -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json"  | grep -Po '(?<="id":")[^"]*')"
    echo "${DYNHOSTNAME} DNS record identifier is ${AUTO_RECORD_IDENTIFIER}. Updating ${CONFIG_FILE}"
    sed -i "s/^AUTO_RECORD_IDENTIFIER=.*$/AUTO_RECORD_IDENTIFIER='${AUTO_RECORD_IDENTIFIER}'/g" ${CONFIG_FILE}
  fi

  update=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${ZONEID}/dns_records/${AUTO_RECORD_IDENTIFIER}" -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" --data "{\"id\":\"${ZONEID}\",\"type\":\"A\",\"name\":\"${DYNHOSTNAME}\",\"content\":\"${CURR_IP}\",\"ttl\":${TTL}}")

  if [[ $update == *"\"success\":false"* ]]; then
      message="API UPDATE FAILED. DUMPING RESULTS:\n$update"
      notify "$message"
      exit 1
  fi
}

store_ip () {
echo "${CURR_IP}" > ${P_IP}
}


####################################################################
# Initialise TRIES variable
TRIES=0

# Set max number of possible re-tries
MAXTRIES=3

get_ip
check_ip
check_if_servername_has_changed
is_update_required

